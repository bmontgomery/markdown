module Markdown


  class Opts
  
    def initialize
      @hash = {}
    end
    
    def put( key, value )
      @hash[ key.to_s ] = value
    end    
  
    def output_path
      @hash.fetch( 'output', '.' )
    end

  end # class Opts



  class Gen

    attr_reader :logger
    attr_reader :opts
    
    def initialize
      @logger       = Logger.new(STDOUT)
      @logger.level = Logger::INFO
      @opts         = Opts.new
    end

    def with_output_path( dest, output_path )
      dest_full = File.expand_path( dest, output_path )
      logger.debug "dest_full=#{dest_full}"
      
      # make sure dest path exists
      dest_path = File.dirname( dest_full )
      logger.debug "dest_path=#{dest_path}"
      FileUtils.makedirs( dest_path ) unless File.directory? dest_path
      dest_full
    end

    def create_doc( fn )
 
      # expand output path in current dir and make sure output path exists
      outpath = File.expand_path( opts.output_path ) 
      logger.debug "outpath=#{outpath}"
      FileUtils.makedirs( outpath ) unless File.directory? outpath 

      dirname  = File.dirname( fn )    
      basename = File.basename( fn, '.*' )
      extname  = File.extname( fn )
      logger.debug "dirname=#{dirname}, basename=#{basename}, extname=#{extname}"

      # change working dir to sourcefile dir
      # todo: add a -c option to commandline? to let you set cwd?
    
      newcwd  = File.expand_path( dirname )
      oldcwd  = File.expand_path( Dir.pwd )
    
      unless newcwd == oldcwd then
        logger.debug "oldcwd=#{oldcwd}"
        logger.debug "newcwd=#{newcwd}"
        Dir.chdir newcwd
      end  
                
      if extname.empty? then
        extname  = ".markdown"   # default to .markdown 
    
        [ '.markdown', '.m', '.mark', '.mkdn', '.md', '.txt', '.text' ].each do |e|
          logger.debug "File.exists? #{dirname}/#{basename}#{e}"
          if File.exists?( "#{dirname}/#{basename}#{e}" ) then         
            extname = e
            logger.debug "extname=#{extname}"
            break
          end
        end  # each extension (e)
      end

      inname  =  "#{dirname}/#{basename}#{extname}"

      puts "Reading document '#{basename}#{extname}'..."
      
      
      logger.debug "inname=#{inname}"
    
      content = File.read( inname )

      # convert light-weight markup to hypertext

      content = Markdown.new( content ).to_html

      outname = "#{basename}.html"
      puts "Preparing #{outname}..."      

      out = File.new( with_output_path( outname, outpath ), "w+" )
      out << "<!-- ======================================================================\n"
      out << "      generated by #{Markdown.banner}\n"
      out << "                on #{Time.now} with Markdown engine '#{Markdown.lib}'\n"
      out << "     ====================================================================== -->\n"
      out << content
      out.flush
      out.close

    end # method create_doc
    
    
    def run( args )
      opt=OptionParser.new do |cmd|
    
        cmd.banner = "Usage: markdown [options] name"
    
        cmd.on( '-o', '--output PATH', 'Output Path' ) { |s| opts.put( 'output', s ) }

        # todo: find different letter for debug trace switch (use v for version?)
        cmd.on( "-v", "--verbose", "Show debug trace" )  do
           logger.datetime_format = "%H:%H:%S"
           logger.level = Logger::DEBUG      
        end
 
        cmd.on_tail( "-h", "--help", "Show this message" ) do
           puts 
           puts "Markdown is ..."
           puts
           puts cmd.help
           puts
           puts "Examples:"
           puts "  markdown microformats"
           puts "  markdown microformats.text            # Process slides using Markdown"
           puts "  markdown -o site microformats       # Output slideshow to slides folder"
           puts
           puts "Further information:"
           puts "  http://geraldb.github.com/markdown" 
           exit
        end
      end

      opt.parse!( args )
  
      puts Markdown.banner

      args.each { |fn| create_doc( fn ) }
      
      puts "Done."
      
    end   # method run 
    
  end # class Gen

end # module Markdown